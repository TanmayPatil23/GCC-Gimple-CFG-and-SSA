SSA
---

;; Function printf (printf, funcdef_no=15, decl_uid=937, cgraph_uid=16, symbol_order=15)

__attribute__((artificial, gnu_inline, always_inline))
printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23)

main ()
{
  int b;
  int a;
  int _8;

  <bb 2> :
  a_4 = 4;
  goto <bb 7>; [INV]

  <bb 3> :
  if (a_1 <= 3)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  b_10 = b_3 + 2;
  goto <bb 6>; [INV]

  <bb 5> :
  b_9 = b_3 * 2;

  <bb 6> :
  # b_2 = PHI <b_10(4), b_9(5)>
  a_11 = a_1 + 1;

  <bb 7> :
  # a_1 = PHI <a_4(2), a_11(6)>
  # b_3 = PHI <b_5(D)(2), b_2(6)>
  if (a_1 <= 99)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  printf ("%d%d", a_1, b_3);
  _8 = 0;
  return _8;

}


Vrp1
----

;; Function main (main, funcdef_no=23, decl_uid=2510, cgraph_uid=24, symbol_order=23) (executed once)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

b_8 -> { b_2 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_9 -> { a_1 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 2 ( 33%)



Value ranges after VRP:

a_1: int [4, 100]
b_2: VARYING
b_3(D): UNDEFINED
b_5: VARYING
a_6: int [5, 100]
b_8: int [b_2, b_2]
a_9: int [4, 99]  EQUIVALENCES: { a_1 } (1 elements)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

a_10 -> { a_1 }
b_11 -> { b_2 }
a_12 -> { a_1 }
b_13 -> { b_2 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 8
Number of blocks to update: 5 ( 62%)


Merging blocks 2 and 6
Removing basic block 3
Merging blocks 7 and 4
main ()
{
  int b;
  int a;

  <bb 2> [local count: 11059540]:

  <bb 3> [local count: 1062682284]:
  # a_12 = PHI <a_6(3), 4(2)>
  # b_13 = PHI <b_5(3), b_3(D)(2)>
  b_5 = b_13 * 2;
  a_6 = a_12 + 1;
  if (a_6 != 100)
    goto <bb 3>; [98.96%]
  else
    goto <bb 4>; [1.04%]

  <bb 4> [local count: 11059541]:
  # b_8 = PHI <b_5(3)>
  __printf_chk (1, "%d%d", 100, b_8);
  return 0;

}
Answers
-------

1. a takes on the values 4 to 100, but only 4 to 99 within the scope of 
   the loop body. The if condition will never be true, and the code in
   the taken branch appears to have been eliminated.
