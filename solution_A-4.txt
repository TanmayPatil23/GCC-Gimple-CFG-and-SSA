CFG
---


;; Function main (main, funcdef_no=0, decl_uid=2313, cgraph_uid=1, symbol_order=0)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
main ()
{
  int * p;
  int i;
  int b[3];
  int a[3];
  int D.2323;

  <bb 2> :
  b[0] = 1;
  b[1] = 2;
  b[2] = 3;
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = b[i];
  a[i] = _1;
  i = i + 1;

  <bb 4> :
  if (i <= 2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  p = &a;
  _2 = p + 8;
  *_2 = 5;
  a = {CLOBBER};
  b = {CLOBBER};
  D.2323 = 0;

  <bb 6> :
<L3>:
  return D.2323;

}


Answers
-------

1. Arrays are declared in a single statement and with no initialisation or 
   explicitly defining the size. Initialisation works on one element
   initialised per statement on scope entry.

2. Because our computer architecture permits only one memory operation per 
   instruction executed. Hence, the use of temporary variable comes into
   picture.

3. The CLOBBER statements at the end are used to mark the arrays as
   invalid when the scope of arrays is exit. It makes it easier for
   computations and also a bit clear from memory allocational view.
