Gimple
------

f ()
{
  int a;
  int b;
  int c;

  a = Z;
  if (a <= 9) goto <D.1917>; else goto <D.1918>;
  <D.1917>:
  b = 5;
  c = 17;
  goto <D.1919>;
  <D.1918>:
  b = 6;
  c = 20;
  if (a == 0) goto <D.1920>; else goto <D.1921>;
  <D.1920>:
  c = 0;
  <D.1921>:
  <D.1919>:
  _1 = b * 10;
  _2 = c + _1;
  Z = _2;
}


CFG
---

;; Function f (f, funcdef_no=0, decl_uid=1911, cgraph_uid=1, symbol_order=1)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
f ()
{
  int c;
  int b;
  int a;

  <bb 2> :
  a = Z;
  if (a <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  b = 5;
  c = 17;
  goto <bb 6>; [INV]

  <bb 4> :
  b = 6;
  c = 20;
  if (a == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  c = 0;

  <bb 6> :
  _1 = b * 10;
  _2 = c + _1;
  Z = _2;
  return;

}


Answers
-------

1. If-blocks are converted to conditional gotos to labels. Unconditional 
   gotos are gotos by themselves on a particular line whereas Conditional
   gotos always have two labels, one for the taken and the other for the 
   not-taken branches.

2. It is easier to look into the control flow in the cfg representation
   as compared to the previous gimple one, on the contrary it is slightly
   less concise in terms of number of lines it computed.


Additional Answer
-----------------

Code:

void f() {
  int a = 1, b = 2, c = 3, x;
  x = a ? b : c;
}

CFG:

;; Function f (f, funcdef_no=0, decl_uid=1703, cgraph_uid=0)

f ()
{
  int x;
  int c;
  int b;
  int a;
  int iftmp.0;

<bb 2>:
  a = 1;
  b = 2;
  c = 3;
  if (a != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  iftmp.0 = b;
  goto <bb 5>;

<bb 4>:
  iftmp.0 = c;

<bb 5>:
  x = iftmp.0;
  return;

}

Answer: The cfg representation breaks it into smaller conditional gotos, 
        whose both the control goes to a single BB (bb 5 in this case)
        for assignment of the result. This dump seems to suggest that the 
        CFG is not quite the SSA I am used to seeing (e.g. would expect 
        something like iftmp.0, iftmp.1 in the different branches and a 
        phi-node at the joining BB).